/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.manasobi.domain;

import lombok.Builder;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
@Builder
public class Point extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -470715606701605848L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Point\",\"namespace\":\"io.manasobi\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"tagId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tagName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"siteId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"opcId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"groupName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quality\",\"type\":\"int\"},{\"name\":\"errorCode\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long timestamp;
  @Deprecated public String tagId;
  @Deprecated public String tagName;
  @Deprecated public String type;
  @Deprecated public String value;
  @Deprecated public String siteId;
  @Deprecated public String opcId;
  @Deprecated public String groupName;
  @Deprecated public int quality;
  @Deprecated public int errorCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Point() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param tagId The new value for tagId
   * @param tagName The new value for tagName
   * @param type The new value for type
   * @param value The new value for value
   * @param siteId The new value for siteId
   * @param opcId The new value for opcId
   * @param groupName The new value for groupName
   * @param quality The new value for quality
   * @param errorCode The new value for errorCode
   */
  public Point(Long timestamp, String tagId, String tagName, String type, String value, String siteId, String opcId, String groupName, Integer quality, Integer errorCode) {
    this.timestamp = timestamp;
    this.tagId = tagId;
    this.tagName = tagName;
    this.type = type;
    this.value = value;
    this.siteId = siteId;
    this.opcId = opcId;
    this.groupName = groupName;
    this.quality = quality;
    this.errorCode = errorCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return tagId;
    case 2: return tagName;
    case 3: return type;
    case 4: return value;
    case 5: return siteId;
    case 6: return opcId;
    case 7: return groupName;
    case 8: return quality;
    case 9: return errorCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: timestamp = (Long)value$; break;
    case 1: tagId = (String)value$; break;
    case 2: tagName = (String)value$; break;
    case 3: type = (String)value$; break;
    case 4: value = (String)value$; break;
    case 5: siteId = (String)value$; break;
    case 6: opcId = (String)value$; break;
    case 7: groupName = (String)value$; break;
    case 8: quality = (Integer)value$; break;
    case 9: errorCode = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'tagId' field.
   * @return The value of the 'tagId' field.
   */
  public String getTagId() {
    return tagId;
  }

  /**
   * Sets the value of the 'tagId' field.
   * @param value the value to set.
   */
  public void setTagId(String value) {
    this.tagId = value;
  }

  /**
   * Gets the value of the 'tagName' field.
   * @return The value of the 'tagName' field.
   */
  public String getTagName() {
    return tagName;
  }

  /**
   * Sets the value of the 'tagName' field.
   * @param value the value to set.
   */
  public void setTagName(String value) {
    this.tagName = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public String getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'siteId' field.
   * @return The value of the 'siteId' field.
   */
  public String getSiteId() {
    return siteId;
  }

  /**
   * Sets the value of the 'siteId' field.
   * @param value the value to set.
   */
  public void setSiteId(String value) {
    this.siteId = value;
  }

  /**
   * Gets the value of the 'opcId' field.
   * @return The value of the 'opcId' field.
   */
  public String getOpcId() {
    return opcId;
  }

  /**
   * Sets the value of the 'opcId' field.
   * @param value the value to set.
   */
  public void setOpcId(String value) {
    this.opcId = value;
  }

  /**
   * Gets the value of the 'groupName' field.
   * @return The value of the 'groupName' field.
   */
  public String getGroupName() {
    return groupName;
  }

  /**
   * Sets the value of the 'groupName' field.
   * @param value the value to set.
   */
  public void setGroupName(String value) {
    this.groupName = value;
  }

  /**
   * Gets the value of the 'quality' field.
   * @return The value of the 'quality' field.
   */
  public Integer getQuality() {
    return quality;
  }

  /**
   * Sets the value of the 'quality' field.
   * @param value the value to set.
   */
  public void setQuality(Integer value) {
    this.quality = value;
  }

  /**
   * Gets the value of the 'errorCode' field.
   * @return The value of the 'errorCode' field.
   */
  public Integer getErrorCode() {
    return errorCode;
  }

  /**
   * Sets the value of the 'errorCode' field.
   * @param value the value to set.
   */
  public void setErrorCode(Integer value) {
    this.errorCode = value;
  }

  /**
   * Creates a new Point RecordBuilder.
   * @return A new Point RecordBuilder
   */
  public static Point.Builder newBuilder() {
    return new Point.Builder();
  }

  /**
   * Creates a new Point RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Point RecordBuilder
   */
  public static Point.Builder newBuilder(Point.Builder other) {
    return new Point.Builder(other);
  }

  /**
   * Creates a new Point RecordBuilder by copying an existing Point instance.
   * @param other The existing instance to copy.
   * @return A new Point RecordBuilder
   */
  public static Point.Builder newBuilder(Point other) {
    return new Point.Builder(other);
  }

  /**
   * RecordBuilder for Point instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Point>
    implements org.apache.avro.data.RecordBuilder<Point> {

    private long timestamp;
    private String tagId;
    private String tagName;
    private String type;
    private String value;
    private String siteId;
    private String opcId;
    private String groupName;
    private int quality;
    private int errorCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Point.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tagId)) {
        this.tagId = data().deepCopy(fields()[1].schema(), other.tagId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tagName)) {
        this.tagName = data().deepCopy(fields()[2].schema(), other.tagName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.siteId)) {
        this.siteId = data().deepCopy(fields()[5].schema(), other.siteId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.opcId)) {
        this.opcId = data().deepCopy(fields()[6].schema(), other.opcId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.groupName)) {
        this.groupName = data().deepCopy(fields()[7].schema(), other.groupName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.quality)) {
        this.quality = data().deepCopy(fields()[8].schema(), other.quality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[9].schema(), other.errorCode);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Point instance
     * @param other The existing instance to copy.
     */
    private Builder(Point other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tagId)) {
        this.tagId = data().deepCopy(fields()[1].schema(), other.tagId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tagName)) {
        this.tagName = data().deepCopy(fields()[2].schema(), other.tagName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.siteId)) {
        this.siteId = data().deepCopy(fields()[5].schema(), other.siteId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.opcId)) {
        this.opcId = data().deepCopy(fields()[6].schema(), other.opcId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.groupName)) {
        this.groupName = data().deepCopy(fields()[7].schema(), other.groupName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.quality)) {
        this.quality = data().deepCopy(fields()[8].schema(), other.quality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[9].schema(), other.errorCode);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Point.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Point.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tagId' field.
      * @return The value.
      */
    public String getTagId() {
      return tagId;
    }

    /**
      * Sets the value of the 'tagId' field.
      * @param value The value of 'tagId'.
      * @return This builder.
      */
    public Point.Builder setTagId(String value) {
      validate(fields()[1], value);
      this.tagId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tagId' field has been set.
      * @return True if the 'tagId' field has been set, false otherwise.
      */
    public boolean hasTagId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tagId' field.
      * @return This builder.
      */
    public Point.Builder clearTagId() {
      tagId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tagName' field.
      * @return The value.
      */
    public String getTagName() {
      return tagName;
    }

    /**
      * Sets the value of the 'tagName' field.
      * @param value The value of 'tagName'.
      * @return This builder.
      */
    public Point.Builder setTagName(String value) {
      validate(fields()[2], value);
      this.tagName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tagName' field has been set.
      * @return True if the 'tagName' field has been set, false otherwise.
      */
    public boolean hasTagName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tagName' field.
      * @return This builder.
      */
    public Point.Builder clearTagName() {
      tagName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public String getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Point.Builder setType(String value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Point.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public String getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public Point.Builder setValue(String value) {
      validate(fields()[4], value);
      this.value = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public Point.Builder clearValue() {
      value = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'siteId' field.
      * @return The value.
      */
    public String getSiteId() {
      return siteId;
    }

    /**
      * Sets the value of the 'siteId' field.
      * @param value The value of 'siteId'.
      * @return This builder.
      */
    public Point.Builder setSiteId(String value) {
      validate(fields()[5], value);
      this.siteId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'siteId' field has been set.
      * @return True if the 'siteId' field has been set, false otherwise.
      */
    public boolean hasSiteId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'siteId' field.
      * @return This builder.
      */
    public Point.Builder clearSiteId() {
      siteId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'opcId' field.
      * @return The value.
      */
    public String getOpcId() {
      return opcId;
    }

    /**
      * Sets the value of the 'opcId' field.
      * @param value The value of 'opcId'.
      * @return This builder.
      */
    public Point.Builder setOpcId(String value) {
      validate(fields()[6], value);
      this.opcId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'opcId' field has been set.
      * @return True if the 'opcId' field has been set, false otherwise.
      */
    public boolean hasOpcId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'opcId' field.
      * @return This builder.
      */
    public Point.Builder clearOpcId() {
      opcId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'groupName' field.
      * @return The value.
      */
    public String getGroupName() {
      return groupName;
    }

    /**
      * Sets the value of the 'groupName' field.
      * @param value The value of 'groupName'.
      * @return This builder.
      */
    public Point.Builder setGroupName(String value) {
      validate(fields()[7], value);
      this.groupName = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'groupName' field has been set.
      * @return True if the 'groupName' field has been set, false otherwise.
      */
    public boolean hasGroupName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'groupName' field.
      * @return This builder.
      */
    public Point.Builder clearGroupName() {
      groupName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'quality' field.
      * @return The value.
      */
    public Integer getQuality() {
      return quality;
    }

    /**
      * Sets the value of the 'quality' field.
      * @param value The value of 'quality'.
      * @return This builder.
      */
    public Point.Builder setQuality(int value) {
      validate(fields()[8], value);
      this.quality = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'quality' field has been set.
      * @return True if the 'quality' field has been set, false otherwise.
      */
    public boolean hasQuality() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'quality' field.
      * @return This builder.
      */
    public Point.Builder clearQuality() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorCode' field.
      * @return The value.
      */
    public Integer getErrorCode() {
      return errorCode;
    }

    /**
      * Sets the value of the 'errorCode' field.
      * @param value The value of 'errorCode'.
      * @return This builder.
      */
    public Point.Builder setErrorCode(int value) {
      validate(fields()[9], value);
      this.errorCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'errorCode' field has been set.
      * @return True if the 'errorCode' field has been set, false otherwise.
      */
    public boolean hasErrorCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'errorCode' field.
      * @return This builder.
      */
    public Point.Builder clearErrorCode() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public Point build() {
      try {
        Point record = new Point();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (Long) defaultValue(fields()[0]);
        record.tagId = fieldSetFlags()[1] ? this.tagId : (String) defaultValue(fields()[1]);
        record.tagName = fieldSetFlags()[2] ? this.tagName : (String) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (String) defaultValue(fields()[3]);
        record.value = fieldSetFlags()[4] ? this.value : (String) defaultValue(fields()[4]);
        record.siteId = fieldSetFlags()[5] ? this.siteId : (String) defaultValue(fields()[5]);
        record.opcId = fieldSetFlags()[6] ? this.opcId : (String) defaultValue(fields()[6]);
        record.groupName = fieldSetFlags()[7] ? this.groupName : (String) defaultValue(fields()[7]);
        record.quality = fieldSetFlags()[8] ? this.quality : (Integer) defaultValue(fields()[8]);
        record.errorCode = fieldSetFlags()[9] ? this.errorCode : (Integer) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
